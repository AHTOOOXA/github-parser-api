name: build and deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - run: echo "ACTOR=${$GITHUB_ACTOR@L}" >>${GITHUB_ENV}
      - uses: actions/checkout@master
      - run: docker login ghcr.io -u $GITHUB_ACTOR -p ${{ secrets.PAT }}
      - run: docker build -t ghcr.io/${ACTOR}/github-parser:latest .
      - run: docker image push ghcr.io/${ACTOR}/github-parser:latest
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Make envfile
        env:
          secret_DB_HOST: ${{ secrets.DB_HOST }}
          secret_DB_PORT: ${{ secrets.DB_PORT }}
          secret_DB_NAME: ${{ secrets.DB_NAME }}
          secret_DB_USER: ${{ secrets.DB_USER }}
          secret_DB_PASS: ${{ secrets.DB_PASS }}
          secret_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          secret_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          secret_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          secret_PGDATA: /var/lib/postgresql/data/pgdata
        run: export | grep "secret_" | sed "s/declare -x secret_//" > .env
      - run: echo "GITHUB_SHA=$GITHUB_SHA" >> .env
      - run: echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ${{ env.SSH_KEY_PATH }} && chmod 600 ${{ env.SSH_KEY_PATH }}
      - run: scp -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_PATH }} .env ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_SSH_HOST }}:github-api/.env
      - run: scp -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_PATH }} docker-compose.yml ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_SSH_HOST }}:github-api/docker-compose.yml
      - run: ssh -i ${{ env.SSH_KEY_PATH }} ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_SSH_HOST }} "cd github-api && docker login ghcr.io -u $GITHUB_ACTOR -p ${{ secrets.PAT }} && docker pull ghcr.io/${ACTOR}/github-parser:latest && docker-compose -f docker-compose.production.yml --env-file=.env up -d && docker system prune --all --force"